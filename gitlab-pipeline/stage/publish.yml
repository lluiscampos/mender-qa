
# Publish acceptance test coverage into coveralls when either:
# * running tests for a mender PR: MENDER_REV ~= /pull/XXX/head/
# * running nightly build: $NIGHTLY_BUILD == "true"
.template_publish_acceptance_coverage:
  only:
    variables:
      - $MENDER_REV =~ /pull\/.*\/head/
      - $NIGHTLY_BUILD == "true"
  stage: publish
  needs:
    - init_workspace
  image: golang:1.15-alpine3.12
  before_script:
    - apk --update add git
    # Run go get out of the repo to not modify go.mod
    - cd / && go get github.com/mattn/goveralls && cd -
    # Coveralls env variables:
    #  According to https://docs.coveralls.io/supported-ci-services
    #  we should set CI_NAME, CI_BUILD_NUMBER, etc. But according
    #  to goveralls source code (https://github.com/mattn/goveralls)
    #  many of these are not supported. Set CI_BRANCH, CI_PR_NUMBER,
    #  and pass few others as command line arguments.
    #  See also https://docs.coveralls.io/api-reference
    - if [ "${MENDER_REV}" = "master" ]; then
    -   export CI_BRANCH=master
    - else
    -   export CI_PR_NUMBER=$(echo ${MENDER_REV} | sed -E 's|pull/([1-9]+)/head|\1|')
    -   export CI_BRANCH=pr_${CI_PR_NUMBER}
    - fi
    # Get mender source
    - tar xf ${CI_PROJECT_DIR}/workspace.tar.gz ./go/src/github.com/mendersoftware/mender
    - mv go/src/github.com/mendersoftware/mender ${CI_PROJECT_DIR}/mender
    - cd ${CI_PROJECT_DIR}/mender
  script:
    - goveralls
      -debug
      -repotoken ${MENDER_COVERALLS_TOKEN}
      -service gitlab-ci
      -jobid $(git rev-parse HEAD)
      -covermode set
      -flagname acceptance-${JOB_BASE_NAME}
      -parallel
      -coverprofile $(find ${CI_PROJECT_DIR}/acceptance-tests-coverage -name 'coverage*.out' | tr '\n' ',' | sed 's/,$//')

publish:acceptance:qemux86_64:uefi_grub:
  extends: .template_publish_acceptance_coverage
  except:
    variables:
      - $TEST_QEMUX86_64_UEFI_GRUB != "true"
  needs:
    - init_workspace
    - test:acceptance:qemux86_64:uefi_grub
  variables:
    JOB_BASE_NAME: qemux86_64_uefi_grub

publish:acceptance:vexpress_qemu:
  extends: .template_publish_acceptance_coverage
  except:
    variables:
      - $TEST_VEXPRESS_QEMU != "true"
  needs:
    - init_workspace
    - test:acceptance:vexpress_qemu
  variables:
    JOB_BASE_NAME: vexpress_qemu

publish:acceptance:qemux86_64:bios_grub:
  extends: .template_publish_acceptance_coverage
  except:
    variables:
      - $TEST_QEMUX86_64_BIOS_GRUB != "true"
  needs:
    - init_workspace
    - test:acceptance:qemux86_64:bios_grub
  variables:
    JOB_BASE_NAME: qemux86_64_bios_grub

publish:acceptance:qemux86_64:bios_grub_gpt:
  extends: .template_publish_acceptance_coverage
  except:
    variables:
      - $TEST_QEMUX86_64_BIOS_GRUB_GPT != "true"
  needs:
    - init_workspace
    - test:acceptance:qemux86_64:bios_grub_gpt
  variables:
    JOB_BASE_NAME: qemux86_64_bios_grub_gpt

publish:acceptance:vexpress_qemu:uboot_uefi_grub:
  extends: .template_publish_acceptance_coverage
  except:
    variables:
      - $TEST_VEXPRESS_QEMU_UBOOT_UEFI_GRUB != "true"
  needs:
    - init_workspace
    - test:acceptance:vexpress_qemu:uboot_uefi_grub
  variables:
    JOB_BASE_NAME: vexpress_qemu_uboot_uefi_grub

publish:acceptance:vexpress_qemu_flash:
  extends: .template_publish_acceptance_coverage
  except:
    variables:
      - $TEST_VEXPRESS_QEMU_FLASH != "true"
  needs:
    - init_workspace
    - test:acceptance:vexpress_qemu_flash
  variables:
    JOB_BASE_NAME: vexpress_qemu_flash

publish:acceptance:beagleboneblack:
  extends: .template_publish_acceptance_coverage
  except:
    variables:
      - $TEST_BEAGLEBONEBLACK != "true"
  needs:
    - init_workspace
    - test:acceptance:beagleboneblack
  variables:
    JOB_BASE_NAME: beagleboneblack

publish:acceptance:raspberrypi3:
  extends: .template_publish_acceptance_coverage
  except:
    variables:
      - $TEST_RASPBERRYPI3 != "true"
  needs:
    - init_workspace
    - test:acceptance:raspberrypi3
  variables:
    JOB_BASE_NAME: raspberrypi3

publish:acceptance:raspberrypi4:
  extends: .template_publish_acceptance_coverage
  except:
    variables:
      - $TEST_RASPBERRYPI4 != "true"
  needs:
    - init_workspace
    - test:acceptance:raspberrypi4
  variables:
    JOB_BASE_NAME: raspberrypi4

publish:mender-dist-packages:
  stage: publish
  rules:
    - if: '$INTEGRATION_REV =~ /^[0-9]+\.[0-9]+\.[0-9]+(-build\d+)?$/'
  variables:
    # Unset DOCKER_ variables, the pipeline will execute on shared runners
    DOCKER_HOST: "tcp://docker:2375"
    DOCKER_CERT_PATH: ""
    DOCKER_TLS_VERIFY: ""
    DOCKER_TLS_CERTDIR: ""
    # Mender release tagged versions:
    MENDER_VERSION: $MENDER_REV
    MENDER_CONNECT_VERSION: $MENDER_CONNECT_REV
    # Obs! mender-configure-module is not part of the release (from release_tool eyes)
    # so it cannot be passed downstream to mender-dist-packages.
    # For this repo, we use the old flow of tag in repo -> trigger in mender-dist-packages
    #MENDER_CONFIGURE_VERSION
  trigger:
    project: Northern.tech/Mender/mender-dist-packages
    branch: master
    strategy: depend
